// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  profilePhoto   String  @db.Text
  coverPhoto     String  @db.Text
  externalUserId String  @unique
  bio            String  @db.Text
  address        String? @db.Text
  role           Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminContent Content[]

}

enum Role {
  USER
  ADMIN
}

model Content {
  id        String  @id @default(uuid())
  title     String
  images    String[]
  link      String
  description String?
  isActive  Boolean @default(false)
  createdAt DateTime @default(now())

  createdBy  String
  user      User    @relation(fields: [createdBy], references: [id])
  bannerContent Banner?
  featuredContent Featured?
  relevantContent Relevant?
  iconicContent Iconic?
  sportsContent Sport?
  logoContent Logo?
  newContent New?
  adsContent Ads?
}

model Logo {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Banner {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique 
}

model New {  
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Ads {  
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Featured {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Relevant {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Iconic {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}

model Sport {
  id        String  @id @default(uuid())
  content   Content @relation(fields: [contentId], references: [id])
  contentId String @unique
}



